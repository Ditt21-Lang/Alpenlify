You are a converter from C code to a json structure. You must parse the header and body file and put the appropriate data to json structure. for example
for the description, infer it from the code

int get_currently_player_music_length(PlayerHandle *handle) {
    float outLen;
    ma_result res;
    res = ma_sound_get_length_in_seconds(&(handle->sound), &outLen);

    if (res != MA_SUCCESS) {
        printf("ERROR: %s", ma_result_description(res));
        return -1;
    }
    
    return (int)floorf(outLen);
}


void destroy_music_player(PlayerHandle *handle)
{
    ma_engine_uninit(&handle->engine);
    CloseHandle(handle->thread_handle);
}

/*
IS: Music player sudah terinisialisasi
FS: mengembalikan panjang dari musik dalam detik. Jika error, mengembalikan -1

Creator: Andi Putra
*/
int get_currently_player_music_length(PlayerHandle *handle);

/*
IS: Music player sudah terinisialisasi dan ada isinya 
FS: Music player hilang, gone, ter-deinisialisasi

Creator: Andi Putra
*/
void destroy_music_player(PlayerHandle *handle);

into 

 "modules": [
            {
                "nama": "Andi Putra",
                "modul": "get_currently_player_music_length",
                "deskripsi": "Mendapatkan panjang dari musik yang sedang dijalankan",
                "tipe": "Function",
                "parameter": [
                    "handle",
                    "PlayerHandle *"
                ],
                "lokal": [
                    "outLen",
                    "float",
                    "res",
                    "ma_result"
                ],
                "is": "Music player belum diinisialisasi",
                "fs": "mengembalikan panjang dari musik dalam detik. Jika error, mengembalikan -1"
            },
            {
                "nama": "Andi Putra Wijaya",
                "modul": "destroy_music_player",
                "deskripsi": "Mendiinisialisasi Music",
                "tipe": "Procedure",
                "parameter": [
                    "handle",
                    "PlayerHandle *",
                ],
                "lokal": [
                ],
                "is": "Music player sudah terinisialisasi dan ada isinya ",
                "fs": "Music player hilang, gone, ter-deinisialisasi"
            }
        ]


=== 

You are a converter from C code to a pseudocode with certain rules, You must parse the body and simply output the resulting pseudocode.

For example, this code will be converted as.

void add_music(MusicNode tree, QueueMusic *queue){
    char x[1024];
    MusicTree temp1, temp2;
    temp1 = &tree;
    temp2 = temp1;
    while(1){
        print_children(temp1);
        printf("Masukkan nama musik atau folder: ");
        fgets(x, 1024, stdin);
        int len = strlen(x);
        x[len-1] = '\0';
        temp1 = search_node(temp1, x);
        if(temp1==NULL){
            printf("Tidak ada file/direktori tersebut\n");
            temp1 = temp2;
            getch();
            continue;
        }
        if(len>=5){
            if (strcmp(&x[len - 5], ".mp3") == 0) {
                EnQueueMusic(queue,temp1);
                printf("Lagu %s berhasil dimasukkan\n", temp1->name);
                getch();
                return;
            } else {
                temp2 = temp1;
            }
        
        }
    system("cls");
    }
    search_node(&tree,x);
}

will be.

PROCEDURE add_music(tree: MusicNode, queue: ^queue)
    // kamus
    x: char[1024]
    temp1, temp2: MusicTree
    len: integer
    // algoritma

    temp1 <- address(tree)
    temp2 <- temp1
    WHILE (true) DO
        print_children(temp1)
        WRITE "Masukkan nama musik atau folder: "
        READ x
        len <- strlen(x)
        x[len - 1] <- '\0'
        temp1 <- search_node(temp1, x)
        IF temp1 = NIL THEN
            WRITE "Tidak ada file/direktori tersebut"
            temp1 <- temp2
            continue
        ENDIF

        IF len >= 5 THEN
            IF strcmp(address(x[len - 5]), ".mp3") THEN
                EnQueueMusic(queue,temp1);
                WRITE "Lagu %s berhasil dimasukkan\n"
                return
            ELSE
                 temp2 = temp1
            ENDIF
        ENDIF
    ENDWHILE
    search_node(address(tree),x);
ENDPROCEDURE

in case of a functon. the function prototype will be
FUNCTION identifier(param: paramType...) -> return type
example
FUNCTION a_function(input: integer) -> integer